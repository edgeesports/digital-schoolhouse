<?php

// Data functions (insert, update, delete, form) for table students

// This script and data application were generated by AppGini 5.72
// Download AppGini for free from https://bigprof.com/appgini/download/

function students_insert(){
	global $Translation;

	// mm: can member insert record?
	$arrPerm=getTablePermissions('students');
	if(!$arrPerm[1]){
		return false;
	}

	$data['first_name'] = makeSafe($_REQUEST['first_name']);
		if($data['first_name'] == empty_lookup_value){ $data['first_name'] = ''; }
	$data['last_name'] = makeSafe($_REQUEST['last_name']);
		if($data['last_name'] == empty_lookup_value){ $data['last_name'] = ''; }
	$data['gamertag'] = makeSafe($_REQUEST['gamertag']);
		if($data['gamertag'] == empty_lookup_value){ $data['gamertag'] = ''; }
	$data['gender'] = makeSafe($_REQUEST['gender']);
		if($data['gender'] == empty_lookup_value){ $data['gender'] = ''; }
	$data['school'] = makeSafe($_REQUEST['school']);
		if($data['school'] == empty_lookup_value){ $data['school'] = ''; }
	$data['year_group'] = makeSafe($_REQUEST['year_group']);
		if($data['year_group'] == empty_lookup_value){ $data['year_group'] = ''; }
	$data['tutor_group'] = makeSafe($_REQUEST['tutor_group']);
		if($data['tutor_group'] == empty_lookup_value){ $data['tutor_group'] = ''; }
	$data['role_type'] = makeSafe($_REQUEST['role_type']);
		if($data['role_type'] == empty_lookup_value){ $data['role_type'] = ''; }
	$data['role'] = makeSafe($_REQUEST['role']);
		if($data['role'] == empty_lookup_value){ $data['role'] = ''; }
	$data['team'] = makeSafe($_REQUEST['team']);
		if($data['team'] == empty_lookup_value){ $data['team'] = ''; }
	$data['email'] = makeSafe($_REQUEST['email']);
		if($data['email'] == empty_lookup_value){ $data['email'] = ''; }
	$data['profile_text'] = makeSafe($_REQUEST['profile_text']);
		if($data['profile_text'] == empty_lookup_value){ $data['profile_text'] = ''; }
	$data['overwatch_stats'] = makeSafe($_REQUEST['overwatch_stats']);
		if($data['overwatch_stats'] == empty_lookup_value){ $data['overwatch_stats'] = ''; }
	$data['created_by'] = parseCode('<%%creatorUsername%%>', true);
	$data['profile_pic'] = PrepareUploadedFile('profile_pic', 102400,'jpg|jpeg|gif|png', false, '');
	if($data['profile_pic']) createThumbnail($data['profile_pic'], getThumbnailSpecs('students', 'profile_pic', 'tv'));
	if($data['profile_pic']) createThumbnail($data['profile_pic'], getThumbnailSpecs('students', 'profile_pic', 'dv'));
	if($data['first_name']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'First Name': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['last_name']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Last Name': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['gender']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Gender': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['school']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'My School': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['year_group']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Year Group': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['tutor_group']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Tutor Group': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['role_type']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Role Type': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['role']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Role': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	if($data['email']== ''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">" . $Translation['error:'] . " 'Email': " . $Translation['field not null'] . '<br><br>';
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}

	/* for empty upload fields, when saving a copy of an existing record, copy the original upload field */
	if($_REQUEST['SelectedID']){
		$res = sql("select * from students where id='" . makeSafe($_REQUEST['SelectedID']) . "'", $eo);
		if($row = db_fetch_assoc($res)){
			if(!$data['profile_pic']) $data['profile_pic'] = makeSafe($row['profile_pic']);
		}
	}

	// hook: students_before_insert
	if(function_exists('students_before_insert')){
		$args=array();
		if(!students_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o = array('silentErrors' => true);
	sql('insert into `students` set       ' . ($data['profile_pic'] != '' ? "`profile_pic`='{$data['profile_pic']}'" : '`profile_pic`=NULL') . ', `first_name`=' . (($data['first_name'] !== '' && $data['first_name'] !== NULL) ? "'{$data['first_name']}'" : 'NULL') . ', `last_name`=' . (($data['last_name'] !== '' && $data['last_name'] !== NULL) ? "'{$data['last_name']}'" : 'NULL') . ', `gamertag`=' . (($data['gamertag'] !== '' && $data['gamertag'] !== NULL) ? "'{$data['gamertag']}'" : 'NULL') . ', `gender`=' . (($data['gender'] !== '' && $data['gender'] !== NULL) ? "'{$data['gender']}'" : 'NULL') . ', `school`=' . (($data['school'] !== '' && $data['school'] !== NULL) ? "'{$data['school']}'" : 'NULL') . ', `year_group`=' . (($data['year_group'] !== '' && $data['year_group'] !== NULL) ? "'{$data['year_group']}'" : 'NULL') . ', `tutor_group`=' . (($data['tutor_group'] !== '' && $data['tutor_group'] !== NULL) ? "'{$data['tutor_group']}'" : 'NULL') . ', `role_type`=' . (($data['role_type'] !== '' && $data['role_type'] !== NULL) ? "'{$data['role_type']}'" : 'NULL') . ', `role`=' . (($data['role'] !== '' && $data['role'] !== NULL) ? "'{$data['role']}'" : 'NULL') . ', `team`=' . (($data['team'] !== '' && $data['team'] !== NULL) ? "'{$data['team']}'" : 'NULL') . ', `email`=' . (($data['email'] !== '' && $data['email'] !== NULL) ? "'{$data['email']}'" : 'NULL') . ', `profile_text`=' . (($data['profile_text'] !== '' && $data['profile_text'] !== NULL) ? "'{$data['profile_text']}'" : 'NULL') . ', `overwatch_stats`=' . (($data['overwatch_stats'] !== '' && $data['overwatch_stats'] !== NULL) ? "'{$data['overwatch_stats']}'" : 'NULL') . ', `created_by`=' . "'{$data['created_by']}'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"students_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID = db_insert_id(db_link());

	// hook: students_after_insert
	if(function_exists('students_after_insert')){
		$res = sql("select * from `students` where `id`='" . makeSafe($recID, false) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=array();
		if(!students_after_insert($data, getMemberInfo(), $args)){ return $recID; }
	}

	// mm: save ownership data
	set_record_owner('students', $recID, getLoggedMemberID());

	return $recID;
}

function students_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('students');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='students' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='students' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: students_before_delete
	if(function_exists('students_before_delete')){
		$args=array();
		if(!students_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	sql("delete from `students` where `id`='$selected_id'", $eo);

	// hook: students_after_delete
	if(function_exists('students_after_delete')){
		$args=array();
		students_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='students' and pkValue='$selected_id'", $eo);
}

function students_update($selected_id){
	global $Translation;

	// mm: can member edit record?
	$arrPerm=getTablePermissions('students');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='students' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='students' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['first_name'] = makeSafe($_REQUEST['first_name']);
		if($data['first_name'] == empty_lookup_value){ $data['first_name'] = ''; }
	if($data['first_name']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'First Name': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['last_name'] = makeSafe($_REQUEST['last_name']);
		if($data['last_name'] == empty_lookup_value){ $data['last_name'] = ''; }
	if($data['last_name']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Last Name': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['gamertag'] = makeSafe($_REQUEST['gamertag']);
		if($data['gamertag'] == empty_lookup_value){ $data['gamertag'] = ''; }
	$data['gender'] = makeSafe($_REQUEST['gender']);
		if($data['gender'] == empty_lookup_value){ $data['gender'] = ''; }
	if($data['gender']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Gender': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['school'] = makeSafe($_REQUEST['school']);
		if($data['school'] == empty_lookup_value){ $data['school'] = ''; }
	if($data['school']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'My School': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['year_group'] = makeSafe($_REQUEST['year_group']);
		if($data['year_group'] == empty_lookup_value){ $data['year_group'] = ''; }
	if($data['year_group']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Year Group': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['tutor_group'] = makeSafe($_REQUEST['tutor_group']);
		if($data['tutor_group'] == empty_lookup_value){ $data['tutor_group'] = ''; }
	if($data['tutor_group']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Tutor Group': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['role_type'] = makeSafe($_REQUEST['role_type']);
		if($data['role_type'] == empty_lookup_value){ $data['role_type'] = ''; }
	if($data['role_type']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Role Type': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['role'] = makeSafe($_REQUEST['role']);
		if($data['role'] == empty_lookup_value){ $data['role'] = ''; }
	if($data['role']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Role': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['team'] = makeSafe($_REQUEST['team']);
		if($data['team'] == empty_lookup_value){ $data['team'] = ''; }
	$data['email'] = makeSafe($_REQUEST['email']);
		if($data['email'] == empty_lookup_value){ $data['email'] = ''; }
	if($data['email']==''){
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Email': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">'.$Translation['< back'].'</a></div>';
		exit;
	}
	$data['profile_text'] = makeSafe($_REQUEST['profile_text']);
		if($data['profile_text'] == empty_lookup_value){ $data['profile_text'] = ''; }
	$data['overwatch_stats'] = makeSafe($_REQUEST['overwatch_stats']);
		if($data['overwatch_stats'] == empty_lookup_value){ $data['overwatch_stats'] = ''; }
	$data['edited_by'] = parseCode('<%%editorUsername%%>', false);
	$data['selectedID']=makeSafe($selected_id);
	if($_REQUEST['profile_pic_remove'] == 1){
		$data['profile_pic'] = '';
	}else{
		$data['profile_pic'] = PrepareUploadedFile('profile_pic', 102400, 'jpg|jpeg|gif|png', false, "");
		if($data['profile_pic']) createThumbnail($data['profile_pic'], getThumbnailSpecs('students', 'profile_pic', 'tv'));
		if($data['profile_pic']) createThumbnail($data['profile_pic'], getThumbnailSpecs('students', 'profile_pic', 'dv'));
	}

	// hook: students_before_update
	if(function_exists('students_before_update')){
		$args=array();
		if(!students_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `students` set       ' . ($data['profile_pic']!='' ? "`profile_pic`='{$data['profile_pic']}'" : ($_REQUEST['profile_pic_remove'] != 1 ? '`profile_pic`=`profile_pic`' : '`profile_pic`=NULL')) . ', `first_name`=' . (($data['first_name'] !== '' && $data['first_name'] !== NULL) ? "'{$data['first_name']}'" : 'NULL') . ', `last_name`=' . (($data['last_name'] !== '' && $data['last_name'] !== NULL) ? "'{$data['last_name']}'" : 'NULL') . ', `gamertag`=' . (($data['gamertag'] !== '' && $data['gamertag'] !== NULL) ? "'{$data['gamertag']}'" : 'NULL') . ', `gender`=' . (($data['gender'] !== '' && $data['gender'] !== NULL) ? "'{$data['gender']}'" : 'NULL') . ', `school`=' . (($data['school'] !== '' && $data['school'] !== NULL) ? "'{$data['school']}'" : 'NULL') . ', `year_group`=' . (($data['year_group'] !== '' && $data['year_group'] !== NULL) ? "'{$data['year_group']}'" : 'NULL') . ', `tutor_group`=' . (($data['tutor_group'] !== '' && $data['tutor_group'] !== NULL) ? "'{$data['tutor_group']}'" : 'NULL') . ', `role_type`=' . (($data['role_type'] !== '' && $data['role_type'] !== NULL) ? "'{$data['role_type']}'" : 'NULL') . ', `role`=' . (($data['role'] !== '' && $data['role'] !== NULL) ? "'{$data['role']}'" : 'NULL') . ', `team`=' . (($data['team'] !== '' && $data['team'] !== NULL) ? "'{$data['team']}'" : 'NULL') . ', `email`=' . (($data['email'] !== '' && $data['email'] !== NULL) ? "'{$data['email']}'" : 'NULL') . ', `profile_text`=' . (($data['profile_text'] !== '' && $data['profile_text'] !== NULL) ? "'{$data['profile_text']}'" : 'NULL') . ', `overwatch_stats`=' . (($data['overwatch_stats'] !== '' && $data['overwatch_stats'] !== NULL) ? "'{$data['overwatch_stats']}'" : 'NULL') . ', `edited_by`=' . "'{$data['edited_by']}'" . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="students_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: students_after_update
	if(function_exists('students_after_update')){
		$res = sql("SELECT * FROM `students` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!students_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='students' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function students_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = ''){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('students');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_school = thisOr(undo_magic_quotes($_REQUEST['filterer_school']), '');
	$filterer_role_type = thisOr(undo_magic_quotes($_REQUEST['filterer_role_type']), '');
	$filterer_role = thisOr(undo_magic_quotes($_REQUEST['filterer_role']), '');
	$filterer_team = thisOr(undo_magic_quotes($_REQUEST['filterer_team']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_role && !$filterer_role_type) $filterer_role_type = sqlValue("select role_type from roles where id='" . makeSafe($filterer_role) . "'");
	if($filterer_team && !$filterer_school) $filterer_school = sqlValue("select school from teams where id='" . makeSafe($filterer_team) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: gender
	$combo_gender = new Combo;
	$combo_gender->ListType = 2;
	$combo_gender->MultipleSeparator = ', ';
	$combo_gender->ListBoxHeight = 10;
	$combo_gender->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/students.gender.csv')){
		$gender_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/students.gender.csv')));
		$combo_gender->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($gender_data)));
		$combo_gender->ListData = $combo_gender->ListItem;
	}else{
		$combo_gender->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("M;;F")));
		$combo_gender->ListData = $combo_gender->ListItem;
	}
	$combo_gender->SelectName = 'gender';
	$combo_gender->AllowNull = false;
	// combobox: school
	$combo_school = new DataCombo;
	// combobox: year_group
	$combo_year_group = new Combo;
	$combo_year_group->ListType = 0;
	$combo_year_group->MultipleSeparator = ', ';
	$combo_year_group->ListBoxHeight = 10;
	$combo_year_group->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/students.year_group.csv')){
		$year_group_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/students.year_group.csv')));
		$combo_year_group->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($year_group_data)));
		$combo_year_group->ListData = $combo_year_group->ListItem;
	}else{
		$combo_year_group->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("7;;8;;9;;10;;11;;12;;13")));
		$combo_year_group->ListData = $combo_year_group->ListItem;
	}
	$combo_year_group->SelectName = 'year_group';
	$combo_year_group->AllowNull = false;
	// combobox: role_type
	$combo_role_type = new DataCombo;
	// combobox: role, filterable by: role_type
	$combo_role = new DataCombo;
	// combobox: team, filterable by: school
	$combo_team = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='students' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='students' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `students` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found'], 'students_view.php', false);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_gender->SelectedData = $row['gender'];
		$combo_school->SelectedData = $row['school'];
		$combo_year_group->SelectedData = $row['year_group'];
		$combo_role_type->SelectedData = $row['role_type'];
		$combo_role->SelectedData = $row['role'];
		$combo_team->SelectedData = $row['team'];
	}else{
		$combo_gender->SelectedText = ( $_REQUEST['FilterField'][1]=='6' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_school->SelectedData = $filterer_school;
		$combo_year_group->SelectedText = ( $_REQUEST['FilterField'][1]=='8' && $_REQUEST['FilterOperator'][1]=='<=>' ? (get_magic_quotes_gpc() ? stripslashes($_REQUEST['FilterValue'][1]) : $_REQUEST['FilterValue'][1]) : "");
		$combo_role_type->SelectedData = $filterer_role_type;
		$combo_role->SelectedData = $filterer_role;
		$combo_team->SelectedData = $filterer_team;
	}
	$combo_gender->Render();
	$combo_school->HTML = '<span id="school-container' . $rnd1 . '"></span><input type="hidden" name="school" id="school' . $rnd1 . '" value="' . html_attr($combo_school->SelectedData) . '">';
	$combo_school->MatchText = '<span id="school-container-readonly' . $rnd1 . '"></span><input type="hidden" name="school" id="school' . $rnd1 . '" value="' . html_attr($combo_school->SelectedData) . '">';
	$combo_year_group->Render();
	$combo_role_type->HTML = '<span id="role_type-container' . $rnd1 . '"></span><input type="hidden" name="role_type" id="role_type' . $rnd1 . '" value="' . html_attr($combo_role_type->SelectedData) . '">';
	$combo_role_type->MatchText = '<span id="role_type-container-readonly' . $rnd1 . '"></span><input type="hidden" name="role_type" id="role_type' . $rnd1 . '" value="' . html_attr($combo_role_type->SelectedData) . '">';
	$combo_role->HTML = '<span id="role-container' . $rnd1 . '"></span><input type="hidden" name="role" id="role' . $rnd1 . '" value="' . html_attr($combo_role->SelectedData) . '">';
	$combo_role->MatchText = '<span id="role-container-readonly' . $rnd1 . '"></span><input type="hidden" name="role" id="role' . $rnd1 . '" value="' . html_attr($combo_role->SelectedData) . '">';
	$combo_team->HTML = '<span id="team-container' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';
	$combo_team->MatchText = '<span id="team-container-readonly' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_school__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['school'] : $filterer_school); ?>"};
		AppGini.current_role_type__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['role_type'] : $filterer_role_type); ?>"};
		AppGini.current_role__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['role'] : $filterer_role); ?>"};
		AppGini.current_team__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['team'] : $filterer_team); ?>"};

		jQuery(function() {
			setTimeout(function(){
				if(typeof(school_reload__RAND__) == 'function') school_reload__RAND__();
				if(typeof(role_type_reload__RAND__) == 'function') role_type_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(role_reload__RAND__) == \'function\') role_reload__RAND__(AppGini.current_role_type__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(team_reload__RAND__) == \'function\') team_reload__RAND__(AppGini.current_school__RAND__.value);' : ''); ?>
			}, 10); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function school_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#school-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_school__RAND__.value, t: 'students', f: 'school' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="school"]').val(resp.results[0].id);
							$j('[id=school-container-readonly__RAND__]').html('<span id="school-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=schools_view_parent]').hide(); }else{ $j('.btn[id=schools_view_parent]').show(); }

						if(typeof(team_reload__RAND__) == 'function') team_reload__RAND__(AppGini.current_school__RAND__.value);

							if(typeof(school_update_autofills__RAND__) == 'function') school_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'students', f: 'school' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_school__RAND__.value = e.added.id;
				AppGini.current_school__RAND__.text = e.added.text;
				$j('[name="school"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=schools_view_parent]').hide(); }else{ $j('.btn[id=schools_view_parent]').show(); }

						if(typeof(team_reload__RAND__) == 'function') team_reload__RAND__(AppGini.current_school__RAND__.value);

				if(typeof(school_update_autofills__RAND__) == 'function') school_update_autofills__RAND__();
			});

			if(!$j("#school-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_school__RAND__.value, t: 'students', f: 'school' },
					success: function(resp){
						$j('[name="school"]').val(resp.results[0].id);
						$j('[id=school-container-readonly__RAND__]').html('<span id="school-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=schools_view_parent]').hide(); }else{ $j('.btn[id=schools_view_parent]').show(); }

						if(typeof(school_update_autofills__RAND__) == 'function') school_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_school__RAND__.value, t: 'students', f: 'school' },
				success: function(resp){
					$j('[id=school-container__RAND__], [id=school-container-readonly__RAND__]').html('<span id="school-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=schools_view_parent]').hide(); }else{ $j('.btn[id=schools_view_parent]').show(); }

					if(typeof(school_update_autofills__RAND__) == 'function') school_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function role_type_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#role_type-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_role_type__RAND__.value, t: 'students', f: 'role_type' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="role_type"]').val(resp.results[0].id);
							$j('[id=role_type-container-readonly__RAND__]').html('<span id="role_type-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=role_types_view_parent]').hide(); }else{ $j('.btn[id=role_types_view_parent]').show(); }

						if(typeof(role_reload__RAND__) == 'function') role_reload__RAND__(AppGini.current_role_type__RAND__.value);

							if(typeof(role_type_update_autofills__RAND__) == 'function') role_type_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'students', f: 'role_type' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_role_type__RAND__.value = e.added.id;
				AppGini.current_role_type__RAND__.text = e.added.text;
				$j('[name="role_type"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=role_types_view_parent]').hide(); }else{ $j('.btn[id=role_types_view_parent]').show(); }

						if(typeof(role_reload__RAND__) == 'function') role_reload__RAND__(AppGini.current_role_type__RAND__.value);

				if(typeof(role_type_update_autofills__RAND__) == 'function') role_type_update_autofills__RAND__();
			});

			if(!$j("#role_type-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_role_type__RAND__.value, t: 'students', f: 'role_type' },
					success: function(resp){
						$j('[name="role_type"]').val(resp.results[0].id);
						$j('[id=role_type-container-readonly__RAND__]').html('<span id="role_type-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=role_types_view_parent]').hide(); }else{ $j('.btn[id=role_types_view_parent]').show(); }

						if(typeof(role_type_update_autofills__RAND__) == 'function') role_type_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_role_type__RAND__.value, t: 'students', f: 'role_type' },
				success: function(resp){
					$j('[id=role_type-container__RAND__], [id=role_type-container-readonly__RAND__]').html('<span id="role_type-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=role_types_view_parent]').hide(); }else{ $j('.btn[id=role_types_view_parent]').show(); }

					if(typeof(role_type_update_autofills__RAND__) == 'function') role_type_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function role_reload__RAND__(filterer_role_type){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#role-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_role_type: filterer_role_type, id: AppGini.current_role__RAND__.value, t: 'students', f: 'role' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="role"]').val(resp.results[0].id);
							$j('[id=role-container-readonly__RAND__]').html('<span id="role-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=roles_view_parent]').hide(); }else{ $j('.btn[id=roles_view_parent]').show(); }


							if(typeof(role_update_autofills__RAND__) == 'function') role_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_role_type: filterer_role_type, s: term, p: page, t: 'students', f: 'role' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_role__RAND__.value = e.added.id;
				AppGini.current_role__RAND__.text = e.added.text;
				$j('[name="role"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=roles_view_parent]').hide(); }else{ $j('.btn[id=roles_view_parent]').show(); }


				if(typeof(role_update_autofills__RAND__) == 'function') role_update_autofills__RAND__();
			});

			if(!$j("#role-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_role__RAND__.value, t: 'students', f: 'role' },
					success: function(resp){
						$j('[name="role"]').val(resp.results[0].id);
						$j('[id=role-container-readonly__RAND__]').html('<span id="role-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=roles_view_parent]').hide(); }else{ $j('.btn[id=roles_view_parent]').show(); }

						if(typeof(role_update_autofills__RAND__) == 'function') role_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_role__RAND__.value, t: 'students', f: 'role' },
				success: function(resp){
					$j('[id=role-container__RAND__], [id=role-container-readonly__RAND__]').html('<span id="role-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=roles_view_parent]').hide(); }else{ $j('.btn[id=roles_view_parent]').show(); }

					if(typeof(role_update_autofills__RAND__) == 'function') role_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function team_reload__RAND__(filterer_school){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#team-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_school: filterer_school, id: AppGini.current_team__RAND__.value, t: 'students', f: 'team' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="team"]').val(resp.results[0].id);
							$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=teams_view_parent]').hide(); }else{ $j('.btn[id=teams_view_parent]').show(); }


							if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 10,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_school: filterer_school, s: term, p: page, t: 'students', f: 'team' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_team__RAND__.value = e.added.id;
				AppGini.current_team__RAND__.text = e.added.text;
				$j('[name="team"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=teams_view_parent]').hide(); }else{ $j('.btn[id=teams_view_parent]').show(); }


				if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
			});

			if(!$j("#team-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_team__RAND__.value, t: 'students', f: 'team' },
					success: function(resp){
						$j('[name="team"]').val(resp.results[0].id);
						$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=teams_view_parent]').hide(); }else{ $j('.btn[id=teams_view_parent]').show(); }

						if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_team__RAND__.value, t: 'students', f: 'team' },
				success: function(resp){
					$j('[id=team-container__RAND__], [id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=teams_view_parent]').hide(); }else{ $j('.btn[id=teams_view_parent]').show(); }

					if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/students_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	}else{
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/students_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Student details', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($arrPerm[1] && !$selected_id){ // allow insert and no record selected?
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return students_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return students_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'AppGini.closeParentModal(); return false;';
	}else{
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$$(\'form\')[0].writeAttribute(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return students_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#profile_pic').replaceWith('<div class=\"form-control-static\" id=\"profile_pic\">' + (jQuery('#profile_pic').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#first_name').replaceWith('<div class=\"form-control-static\" id=\"first_name\">' + (jQuery('#first_name').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#last_name').replaceWith('<div class=\"form-control-static\" id=\"last_name\">' + (jQuery('#last_name').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#gamertag').replaceWith('<div class=\"form-control-static\" id=\"gamertag\">' + (jQuery('#gamertag').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('input[name=gender]').parent().html('<div class=\"form-control-static\">' + jQuery('input[name=gender]:checked').next().text() + '</div>')\n";
		$jsReadOnly .= "\tjQuery('#school').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#school_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#year_group').replaceWith('<div class=\"form-control-static\" id=\"year_group\">' + (jQuery('#year_group').val() || '') + '</div>'); jQuery('#year_group-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#tutor_group').replaceWith('<div class=\"form-control-static\" id=\"tutor_group\">' + (jQuery('#tutor_group').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#role_type').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#role_type_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#role').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#role_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#team').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#team_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#email').replaceWith('<div class=\"form-control-static\" id=\"email\">' + (jQuery('#email').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#email, #email-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#overwatch_stats').replaceWith('<div class=\"form-control-static\" id=\"overwatch_stats\">' + (jQuery('#overwatch_stats').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#overwatch_stats, #overwatch_stats-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif(($AllowInsert && !$selected_id) || ($AllowUpdate && $selected_id)){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(gender)%%>', $combo_gender->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(gender)%%>', $combo_gender->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(school)%%>', $combo_school->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(school)%%>', $combo_school->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(school)%%>', urlencode($combo_school->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(year_group)%%>', $combo_year_group->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(year_group)%%>', $combo_year_group->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(role_type)%%>', $combo_role_type->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(role_type)%%>', $combo_role_type->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(role_type)%%>', urlencode($combo_role_type->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(role)%%>', $combo_role->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(role)%%>', $combo_role->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(role)%%>', urlencode($combo_role->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(team)%%>', $combo_team->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(team)%%>', $combo_team->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(team)%%>', urlencode($combo_team->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array(  'school' => array('schools', 'My School'), 'role_type' => array('role_types', 'Role Type'), 'role' => array('roles', 'Role'), 'team' => array('teams', 'My Team'));
	foreach($lookup_fields as $luf => $ptfc){
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']){
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']){
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(profile_pic)%%>', ($noUploads ? '' : '<input type=hidden name=MAX_FILE_SIZE value=102400>'.$Translation['upload image'].' <input type="file" name="profile_pic" id="profile_pic">'), $templateCode);
	if($AllowUpdate && $row['profile_pic'] != ''){
		$templateCode = str_replace('<%%REMOVEFILE(profile_pic)%%>', '<br><input type="checkbox" name="profile_pic_remove" id="profile_pic_remove" value="1"> <label for="profile_pic_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	}else{
		$templateCode = str_replace('<%%REMOVEFILE(profile_pic)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(first_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(last_name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(gamertag)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(gender)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(school)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(year_group)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(tutor_group)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(role_type)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(role)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(team)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(email)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(profile_text)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(overwatch_stats)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(created_by)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(edited_by)%%>', '', $templateCode);

	// process values
	if($selected_id){
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		$row['profile_pic'] = ($row['profile_pic'] != '' ? $row['profile_pic'] : 'blank.gif');
		if( $dvprint) $templateCode = str_replace('<%%VALUE(profile_pic)%%>', safe_html($urow['profile_pic']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(profile_pic)%%>', html_attr($row['profile_pic']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(profile_pic)%%>', urlencode($urow['profile_pic']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(first_name)%%>', safe_html($urow['first_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(first_name)%%>', html_attr($row['first_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(first_name)%%>', urlencode($urow['first_name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(last_name)%%>', safe_html($urow['last_name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(last_name)%%>', html_attr($row['last_name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_name)%%>', urlencode($urow['last_name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(gamertag)%%>', safe_html($urow['gamertag']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(gamertag)%%>', html_attr($row['gamertag']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gamertag)%%>', urlencode($urow['gamertag']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(gender)%%>', safe_html($urow['gender']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(gender)%%>', html_attr($row['gender']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gender)%%>', urlencode($urow['gender']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(school)%%>', safe_html($urow['school']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(school)%%>', html_attr($row['school']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(school)%%>', urlencode($urow['school']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(year_group)%%>', safe_html($urow['year_group']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(year_group)%%>', html_attr($row['year_group']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(year_group)%%>', urlencode($urow['year_group']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(tutor_group)%%>', safe_html($urow['tutor_group']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(tutor_group)%%>', html_attr($row['tutor_group']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tutor_group)%%>', urlencode($urow['tutor_group']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(role_type)%%>', safe_html($urow['role_type']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(role_type)%%>', html_attr($row['role_type']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(role_type)%%>', urlencode($urow['role_type']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(role)%%>', safe_html($urow['role']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(role)%%>', html_attr($row['role']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(role)%%>', urlencode($urow['role']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', safe_html($urow['team']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', html_attr($row['team']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode($urow['team']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(email)%%>', safe_html($urow['email']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(email)%%>', html_attr($row['email']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(email)%%>', urlencode($urow['email']), $templateCode);
		if($AllowUpdate || $AllowInsert){
			$templateCode = str_replace('<%%HTMLAREA(profile_text)%%>', '<textarea name="profile_text" id="profile_text" rows="5">' . html_attr($row['profile_text']) . '</textarea>', $templateCode);
		}else{
			$templateCode = str_replace('<%%HTMLAREA(profile_text)%%>', '<div id="profile_text" class="form-control-static">' . $row['profile_text'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(profile_text)%%>', nl2br($row['profile_text']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(profile_text)%%>', urlencode($urow['profile_text']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(overwatch_stats)%%>', safe_html($urow['overwatch_stats']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(overwatch_stats)%%>', html_attr($row['overwatch_stats']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(overwatch_stats)%%>', urlencode($urow['overwatch_stats']), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by)%%>', safe_html($urow['created_by']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by)%%>', urlencode($urow['created_by']), $templateCode);
		$templateCode = str_replace('<%%VALUE(edited_by)%%>', safe_html($urow['edited_by']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(edited_by)%%>', urlencode($urow['edited_by']), $templateCode);
	}else{
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(profile_pic)%%>', 'blank.gif', $templateCode);
		$templateCode = str_replace('<%%VALUE(first_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(first_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(gamertag)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gamertag)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(gender)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gender)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(school)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(school)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(year_group)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(year_group)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(tutor_group)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tutor_group)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(role_type)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(role_type)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(role)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(role)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(team)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(email)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(email)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(profile_text)%%>', '<textarea name="profile_text" id="profile_text" rows="5"></textarea>', $templateCode);
		$templateCode = str_replace('<%%VALUE(overwatch_stats)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(overwatch_stats)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by)%%>', '<%%creatorUsername%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by)%%>', urlencode('<%%creatorUsername%%>'), $templateCode);
		$templateCode = str_replace('<%%VALUE(edited_by)%%>', '<%%editorUsername%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(edited_by)%%>', urlencode('<%%editorUsername%%>'), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode = str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
			$templateCode.="\n\tif(document.getElementById('emailEdit')){ document.getElementById('emailEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('emailEditLink')){ document.getElementById('emailEditLink').style.display='none'; }";
			$templateCode.="\n\tif(document.getElementById('overwatch_statsEdit')){ document.getElementById('overwatch_statsEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('overwatch_statsEditLink')){ document.getElementById('overwatch_statsEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('students');
	if($selected_id){
		$jdata = get_joined_record('students', $selected_id);
		if($jdata === false) $jdata = get_defaults('students');
		$rdata = $row;
	}
	$templateCode .= loadView('students-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: students_dv
	if(function_exists('students_dv')){
		$args=array();
		students_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>